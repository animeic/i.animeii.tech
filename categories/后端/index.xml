<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>后端 on 踏切时光</title><link>https://animeii.tech/categories/%E5%90%8E%E7%AB%AF/</link><description>Recent content in 后端 on 踏切时光</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 10 Apr 2022 15:04:31 +0800</lastBuildDate><atom:link href="https://animeii.tech/categories/%E5%90%8E%E7%AB%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>lru缓存淘汰策略</title><link>https://animeii.tech/post/lru/</link><pubDate>Sun, 10 Apr 2022 15:04:31 +0800</pubDate><guid>https://animeii.tech/post/lru/</guid><description>&lt;p>缓存淘汰算法：FIFO、LFU和LRU。
FIFO:先进先出，淘汰最早的数据。
LFU：最少使用，淘汰缓存中访问频率最低的。
LRU：最近最少使用。&lt;/p></description></item><item><title>一致性hash算法</title><link>https://animeii.tech/post/consisitenthash/</link><pubDate>Sun, 10 Apr 2022 10:43:31 +0800</pubDate><guid>https://animeii.tech/post/consisitenthash/</guid><description>&lt;p>一致性hash算法是单节点走向分布式节点的一个重要环节。&lt;/p></description></item><item><title>go语言高性能编程</title><link>https://animeii.tech/post/high_performance/</link><pubDate>Fri, 01 Apr 2022 16:28:17 +0800</pubDate><guid>https://animeii.tech/post/high_performance/</guid><description>&lt;p>go高性能编程相关。&lt;/p></description></item><item><title>面向对象interface</title><link>https://animeii.tech/post/go_xxx_interface/</link><pubDate>Sat, 26 Mar 2022 11:44:36 +0800</pubDate><guid>https://animeii.tech/post/go_xxx_interface/</guid><description>&lt;p>interface是go语言的基础特性之一。可以理解为一种类型的规范或者约定。go中的interface是通过约定的形式，隐式的实现。go中的interface让编码更灵活、易扩展。&lt;/p></description></item><item><title>切片</title><link>https://animeii.tech/post/go_xxx_slice/</link><pubDate>Fri, 25 Mar 2022 17:22:21 +0800</pubDate><guid>https://animeii.tech/post/go_xxx_slice/</guid><description>&lt;p>切片相关&lt;/p></description></item><item><title>数据定义</title><link>https://animeii.tech/post/go_xxx_data_define/</link><pubDate>Fri, 25 Mar 2022 16:34:48 +0800</pubDate><guid>https://animeii.tech/post/go_xxx_data_define/</guid><description>&lt;p>函数返回值、结构体比较、string与nil类型、常量。&lt;/p></description></item><item><title>go中channel的使用</title><link>https://animeii.tech/post/go_xxx_channel/</link><pubDate>Fri, 25 Mar 2022 16:15:08 +0800</pubDate><guid>https://animeii.tech/post/go_xxx_channel/</guid><description>&lt;p>go中channel的使用规则。&lt;/p></description></item><item><title>go中defer的使用</title><link>https://animeii.tech/post/go_xxx_defer/</link><pubDate>Fri, 25 Mar 2022 14:31:09 +0800</pubDate><guid>https://animeii.tech/post/go_xxx_defer/</guid><description>&lt;p>go中多个defer执行为栈。遵循先进后出原则。&lt;/p></description></item></channel></rss>