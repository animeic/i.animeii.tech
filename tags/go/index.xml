<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on 踏切时光</title><link>https://i.animeii.tech/tags/go/</link><description>Recent content in go on 踏切时光</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 12 Apr 2022 13:18:43 +0800</lastBuildDate><atom:link href="https://i.animeii.tech/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go中的垃圾回收机制</title><link>https://i.animeii.tech/post/go_xxx_gc/</link><pubDate>Tue, 12 Apr 2022 13:18:43 +0800</pubDate><guid>https://i.animeii.tech/post/go_xxx_gc/</guid><description>&lt;p>GoV1.3使用普通标记清除法，整体过程需要启动STW，效率极低。&lt;br>
GoV1.5使用三色标记法，堆空间启动写屏障，栈空间不启动，全部扫描之后，需要重新扫描一次栈(需要STW)，效率普通。&lt;br>
GoV1.8使用三色标记法，混合写屏障机制，栈空间不启动，堆空间启动。整个过程几乎不需要STW，效率较高。&lt;/p></description></item><item><title>协程调度原理及GMP模型</title><link>https://i.animeii.tech/post/go_xxx_gmp/</link><pubDate>Mon, 11 Apr 2022 15:32:18 +0800</pubDate><guid>https://i.animeii.tech/post/go_xxx_gmp/</guid><description>&lt;p>go调度器轻量且简单，足以支撑起goroutine的调度工作，并且go具有原生强大的并发能力。go调度本质是把大量的goroutine分配到少量线程去执行，并利用多核并行，实现更强大的并发。&lt;/p></description></item><item><title>lru缓存淘汰策略</title><link>https://i.animeii.tech/post/lru/</link><pubDate>Sun, 10 Apr 2022 15:04:31 +0800</pubDate><guid>https://i.animeii.tech/post/lru/</guid><description>&lt;p>缓存淘汰算法：FIFO、LFU和LRU。
FIFO:先进先出，淘汰最早的数据。
LFU：最少使用，淘汰缓存中访问频率最低的。
LRU：最近最少使用。&lt;/p></description></item><item><title>一致性hash算法</title><link>https://i.animeii.tech/post/consisitenthash/</link><pubDate>Sun, 10 Apr 2022 10:43:31 +0800</pubDate><guid>https://i.animeii.tech/post/consisitenthash/</guid><description>&lt;p>一致性hash算法是单节点走向分布式节点的一个重要环节。&lt;/p></description></item><item><title>go语言高性能编程</title><link>https://i.animeii.tech/post/high_performance/</link><pubDate>Fri, 01 Apr 2022 16:28:17 +0800</pubDate><guid>https://i.animeii.tech/post/high_performance/</guid><description>&lt;p>go高性能编程相关。&lt;/p></description></item><item><title>面向对象interface</title><link>https://i.animeii.tech/post/go_xxx_interface/</link><pubDate>Sat, 26 Mar 2022 11:44:36 +0800</pubDate><guid>https://i.animeii.tech/post/go_xxx_interface/</guid><description>&lt;p>interface是go语言的基础特性之一。可以理解为一种类型的规范或者约定。go中的interface是通过约定的形式，隐式的实现。go中的interface让编码更灵活、易扩展。&lt;/p></description></item><item><title>切片</title><link>https://i.animeii.tech/post/go_xxx_slice/</link><pubDate>Fri, 25 Mar 2022 17:22:21 +0800</pubDate><guid>https://i.animeii.tech/post/go_xxx_slice/</guid><description>&lt;p>切片相关&lt;/p></description></item><item><title>数据定义</title><link>https://i.animeii.tech/post/go_xxx_data_define/</link><pubDate>Fri, 25 Mar 2022 16:34:48 +0800</pubDate><guid>https://i.animeii.tech/post/go_xxx_data_define/</guid><description>&lt;p>函数返回值、结构体比较、string与nil类型、常量。&lt;/p></description></item><item><title>go中channel的使用</title><link>https://i.animeii.tech/post/go_xxx_channel/</link><pubDate>Fri, 25 Mar 2022 16:15:08 +0800</pubDate><guid>https://i.animeii.tech/post/go_xxx_channel/</guid><description>&lt;p>go中channel的使用规则。&lt;/p></description></item><item><title>go中defer的使用</title><link>https://i.animeii.tech/post/go_xxx_defer/</link><pubDate>Fri, 25 Mar 2022 14:31:09 +0800</pubDate><guid>https://i.animeii.tech/post/go_xxx_defer/</guid><description>&lt;p>go中多个defer执行为栈。遵循先进后出原则。&lt;/p></description></item></channel></rss>