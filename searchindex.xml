<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>擅长作弄的高木同学3</title><url>https://i.animeii.tech/anime/sczndgmtx3/</url><categories><category>视频</category></categories><tags><tag>动漫</tag></tags><content type="html"> #sczndgmtx3-container{ display: grid; grid-template-rows: 300px,200px; place-items: center; } .video-content{ display: grid; align-items: center; } .video-index{ margin-top: 20px; display: grid; grid-template-columns: repeat(4,75px); grid-template-rows: repeat(3,40px); gap: 5px; } .video-index p{ width: 70px; height: 30px; border: 1px dashed gray; border-radius: 3px; /* gap: 5px; */ display: grid; place-items: center; } const base_url = "https://ewr1.vultrobjects.com/animeii/video/sczndgmtx3/" const num = 12 var video_urls = [] for (var i=1;i' + video_urls[i].name + '
'; } var paa = document.getElementsByClassName('v_url') for (var i=0;i</content></entry><entry><title>视频首页</title><url>https://i.animeii.tech/anime/av/</url><categories><category>视频</category></categories><tags/><content type="html"> 鬼灭之刃第二季
一念永恒
擅长作弄的高木同学3
.an-container{ display: grid; grid-template-rows: 350px; /* */ /* align-items: center; */ padding: 10px; /* border: 2px dashed gray; */ } .an-text{ display: grid; grid-template-columns: repeat(2,180px); grid-template-rows: repeat(3,40px); gap: 5px; justify-items: start; align-items: center; } .an-text p{ width: 170px; height: 30px; border: 1px dashed gray; border-radius: 3px; display: grid; place-items: center; }</content></entry><entry><title>一念永恒</title><url>https://i.animeii.tech/anime/ynyh/</url><categories><category>视频</category></categories><tags><tag>动漫</tag></tags><content type="html"> #ynyh-container{ display: grid; grid-template-rows: 300px,200px; place-items: center; } .video-content{ display: grid; align-items: center; } .video-index{ margin-top: 20px; display: grid; grid-template-columns: repeat(4,75px); grid-template-rows: repeat(3,40px); } .video-index p{ width: 70px; height: 30px; border: 1px dashed gray; border-radius: 3px; gap: 5px; display: grid; place-items: center; } const base_url = "https://ewr1.vultrobjects.com/animeii/video/ynyh/" const num = 52 var video_urls = [] for (var i=1;i' + video_urls[i].name + '
'; } var paa = document.getElementsByClassName('v_url') for (var i=0;i</content></entry><entry><title>鬼灭之刃第二季</title><url>https://i.animeii.tech/anime/gmzr2/</url><categories><category>视频</category></categories><tags><tag>动漫</tag></tags><content type="html"> #gmzr2-container{ display: grid; grid-template-rows: 300px,200px; place-items: center; } .video-content{ display: grid; align-items: center; } .video-index{ margin-top: 20px; display: grid; grid-template-columns: repeat(4,75px); grid-template-rows: repeat(3,40px); gap: 5px; } .video-index p{ width: 70px; height: 30px; border: 1px dashed gray; border-radius: 3px; /* gap: 5px; */ display: grid; place-items: center; } const base_url = "https://ewr1.vultrobjects.com/animeii/video/gmzr2/" const num = 11 var video_urls = [] for (var i=1;i' + video_urls[i].name + '
'; } var paa = document.getElementsByClassName('v_url') for (var i=0;i</content></entry><entry><title>通过s3cmd管理对象存储</title><url>https://i.animeii.tech/post/manage_object_storage_by_s3cmd/</url><categories><category>websit</category><category>tech</category></categories><tags><tag>bolg</tag></tags><content type="html"> 我需要有存储、管理我的图片及媒体文件。服务器硬盘资源有限，如何扩展呢？加硬盘？最终我选择使用对象存储来解决这一问题。本文为网站s3cmd命令行工具管理对象存储的实践。
因为我是使用vultr的产品。所有我在该云平台上创建一个对象存储实例。具体为$5-1T-250G（价格-流量-存储空间）。对于一个小网站来说足够了。有特殊需求再来扩展。于是我就寻找方便管理存储的工具，S3cmd好像挺不错的。
安装s3cmd
# 使用python3包管理工具 pip3 install s3cmd 配置s3cmd
配置使其与自己创建的对象存储关联。
# 根据提示配置 s3cmd --configure # 需要填写的是： # access key/secret key/endpoint(ewr1.vultrobjects.com) # dns-style(%(bucket).ewr1.vultrobjects.com) # 以上信息都可以在对象存储实例详情中找到 使用s3cmd
# 创建bucket s3cmd mb s3://mybucket # 删除bucket s3cmd rb s3://mybucket # 列出bucket s3cmd ls # 列出bucket中的对象 s3cmd ls s3://mybucket # 上传私有文件 s3cmd put photo.jpg s3://mybucket/photo.jpg # 上传公共文件 --recursive s3cmd put -P photo.jpg s3://mybucket/photo.jpg # 下载文件 s3cmd get s3://mybucket/photo.jpg # 删除文件 s3cmd rm s3://mybucket/photo.jpg # 更新文件为公共访问 s3cmd setacl s3://mybucket/photo.jpg --acl-public # 更新文件为私有访问 s3cmd setacl s3://mybucket/photo.jpg --acl-private # 为bucket启用公共目录列表 s3cmd setacl s3://mybucket/ --acl-public # 为bucket启用私有目录列表 s3cmd setacl s3://mybucket/ --acl-private 上传速度
上传网站图片到对象存储，将图片链接替换成生成的链接。
遇到的问题
在使用s3cmd命令时大多数出现连接被拒绝。这让我很困扰，我知道是网络原因，但无论我怎么更换各种不同的网络源，始终还是这样。搜索引擎搜索也没有结果。最终解决方法是在配置s3cmd --configure设置http代理。</content></entry><entry><title>如何自动更新网站内容</title><url>https://i.animeii.tech/post/sync_push_by_webhook/</url><categories><category>hugo</category><category>tech</category></categories><tags><tag>bolg</tag></tags><content type="html"> 有这样一个需求：在本地编写、管理网站文章，怎样自动的部署到远程服务器上？通过webhook当我编写完文档后，push到github时，会自动部署到远程服务器上。这样既能满足本地快捷的编写文档，又不受限于本地开关机状态。
本文为将博客自动部署到远程vps的实践。
在github创建代码仓库
在github上创建一个公共仓库。将博客的public下的文件提交到该仓库
vps上的准备
1.生成ssh-key,添加到github
# 生成公钥 ssh-keygen -C "animeic@163.com" # 查看并添加到GitHub cat .ssh/id_rsa.pub # 验证 ssh -vT git@github.com # 在github添加 2.安装webhook服务。
apt-get install webhook # 启动服务 webhook -hooks /etc/webhook.yaml # [/etc/webhook.yaml 配置] - id: redeploy-webhook execute-command: "/var/scripts/redeploy.sh" # 执行的脚本 command-working-directory: "/root/i.animeii.tech/static/i.animeii.tech" #需要拉取文件的目录 # 推荐设置system管理，参考如《何创建一个博客网站》中frps的配置方式 # [/var/scripts/redeply.sh 配置] #!/bin/bash git pull git@github.com:animeic/i.animeii.tech.git # 需要注意/root/i.animeii.tech/static/i.animeii.tech 需要git初始化。git init 上面创建的仓库设置webhook
vps上配置nginx使能被http访问到
因为frp与nginx端口冲突，我使用go的gin框架做了个静态服务。
https://github.com/animeic/animeii_main/tree/main/i.animeii.tech
├── bootstrap │ └── initGin.go ├── go.mod ├── go.sum ├── main.go ├── middleware │ └── Cors.go ├── router │ └── initRouter.go ├── static └── i.animeii.tech # 网页文件的根目录 # 编译 go build -o web # 后台启动 nohup ./web &amp; 总结：
1.本地编写文档生成静态文件。git push到代码仓库。
2.github触发push事件。以post方式请求配置的webhook服务接口。
3.webhook接口执行服务器上配置的脚本，pull静态文件到具体目录。
4.配置nginx指向这个目录，使能被web访问。
于是做到了本地编写、管理网站文档。
遇到的问题：
git提交时出现kex_exchange_identification: read: Connection reset by peer
排查方法：ssh -vT git@github.com发现连接github服务器失败。网络原因。</content></entry><entry><title>常用软件安装流程</title><url>https://i.animeii.tech/post/common_use_software_install/</url><categories><category>hugo</category><category>tech</category></categories><tags><tag>bolg</tag></tags><content type="html"> 常用软件安装流程。
go安装 wget https://golang.google.cn/dl/go1.17.2.linux-amd64.tar.gz tar -zxvf go1.17.2.linux-amd64.tar.gz cp -r go /usr/local/ ln -s /usr/local/go/bin/go /usr/bin/go ln -s /usr/local/go/bin/gofmt /usr/bin/gofmt vim /etc/profile # 末尾添加 export GOROOT=/usr/local/go export PATH=$PATH:$GOROOT/bin source profile Redis安装 wget https://download.redis.io/releases/redis-6.2.6.tar.gz tar -zxvf redis-6.2.6.tar.gz make make install cp utils/redis_init_script /etc/init.d/redisd ### 根据脚本中的内容创建目录 mkdir /etc/redis chmod +x /etc/init.d/redisd cd /etc/init.d/ update-rc.d redisd defaults ## service启动 service redisd start service redisd restart service redisd stop ### 截取的脚本中的部分内容 REDISPORT=6379 EXEC=/usr/local/bin/redis-server CLIEXEC=/usr/local/bin/redis-cli PIDFILE=/var/run/redis_${REDISPORT}.pid CONF="/etc/redis/${REDISPORT}.conf"</content></entry><entry><title>Hugo建站相关</title><url>https://i.animeii.tech/post/use_hugo_any/</url><categories><category>hugo</category><category>tech</category></categories><tags><tag>bolg</tag></tags><content type="html"> 扩展网站功能，如何添加音乐、评论系统。在使用博客中，不断扩展其内容。自定义一些功能。
添加评论系统 因为国内网络原因，这里选用utterances作为网站的评论系统。本质上是使用github的issue功能。
step1：新建public github仓库
step2：安装utterances
在github导航栏，Marketplace。搜索并安装utterances，选择上面已创建的git仓库。
step3：在hugo配置文件加入配置
## 配置 utteranc评论,教程参考 https://utteranc.es/ [params.utteranc] enable = true repo = "animeic/bolgtalks" # user/repo issueTerm = "pathname" theme = "github-light" step4：添加代码到hugo主题具体模板内，展示评论
{{ if .Site.Params.utteranc.enable }} &lt;script src="https://utteranc.es/client.js" repo="{{ .Site.Params.utteranc.repo }}" issue-term="{{ .Site.Params.utteranc.issueTerm }}" theme="{{ .Site.Params.utteranc.theme }}" crossorigin="anonymous" async> &lt;/script> {{ end }} 具体效果：
添加网易音乐 1.在站点引入
step1：在网易云页面找到iframe外链代码
step2：配置文件中配置音乐链接地址
step3：在站点模板中加入具体代码
2.在具体文章页面引入
在文章markdown中加入下面的代码
&lt;!-- cloud music --> &lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=52 src="//music.163.com/outchain/player?type=2&amp;id=1897084229&amp;auto=1&amp;height=32">&lt;/iframe></content></entry><entry><title>为什么要做这个博客网站</title><url>https://i.animeii.tech/about/</url><categories><category>website</category><category>life</category></categories><tags><tag>bolg</tag></tags><content type="html"> 其实一直都有创建一个个人站点的的想法。主要用于记录、总结、规划。对于已经经历的事物，总是不得要领，重复重复的低效中度过。虽然重复是人类的本质。
我需要一个工具来使自己有效率。对已经历、已思辨的东西，在遇到的时候能进一步的发现不同。而不单单是低效率的重复。阅读使人充实，谈论使人机敏，写作使人精确。搭建一个个人网站，用于总结以往的经验，思考一些现象和制定目标，通过互联网分享。如果能坚持下去，可以给自己正反馈，相信自己也会变得更有条理。
本站使用vps+frp实现。外网访问本地服务。例如：访问https://i.animeii.tech实际访问的是本地nginx指向的本机静态文件。
使用的产品和技术：
vps：独立ip用于实现外网访问。
frp：内网穿透，用于通过vps转发请求到本地服务。
域名：实现域名访问。
ssl：实现https
cloudflare：用于dns、cdn
hugo：用于生成静态页面。
目标：用最少的外部资源实现一个方便管理、数据自己掌控的个人站点。
花费：64￥/年（vps只用于流量中转，配置为1g1核32硬盘) + 域名首年9￥ = 73￥/年</content></entry><entry><title>使用hugo生成文档页面的流程</title><url>https://i.animeii.tech/post/create_web_page/</url><categories><category>hugo</category><category>tech</category></categories><tags><tag>bolg</tag></tags><content type="html"> hugo生成静态页面的流程。方便流畅的记录内容。
1.设置文章头模板文件。网站根目录下archetypes/default.md
+++ author = "{{ .Site.Params.AuthorName }}" title = "{{ replace .Name "-" " " | title }}" date = {{ .Date }} description = "{{ replace .Name "-" " " | title }}" tags = [ "bolg", ] categories = [ "hugo", "tech", ] +++ 这里是文章概述。。。 &lt;!--more--> 2.新建文档文件
# 在hugo站点根目录执行 hugo new post/doc_name.md 3.书写文档主体
使用markdown编辑器编写文档。修改模板头信息，确定好文章的分类、标签、概述。。。
4.生成html页面
# 推荐使用下面命令生成静态页面。防止页面、图片不生效 hugo -e -production --forceSyncStatic --gc 5.ctrl+F5刷新浏览器。即可在网页上看到文档内容。</content></entry><entry><title>如何创建一个博客网站</title><url>https://i.animeii.tech/post/how_build_bolg_website/</url><categories><category>website</category><category>tech</category></categories><tags><tag>bolg</tag></tags><content type="html"> 本文是本人创建博客站点的整个流程。通过https://i.animeii.tech即可访问到我的站点。其中使用到内网穿透、cloudflare的cdn加速、网站的https访问以及hugo的使用。
如何创建一个博客网站？ 环境：linux桌面版
资源准备
购买vps，推荐vultr新用户活动$10送$100，选低配的可以用18个月。 购买域名。我买的域名后缀是.tech，首年9元。 域名和vps相关准备
注册cloudflare，在注册域名平台（如腾讯云）更改为cloudflare域名服务器地址。 在cloudflare上解析域名，建立域名与ip的映射。 在域名注册平台申请免费的ssl证书。 下载nginx部署证书，根据站点命名。如i.animeii.tech.key i.animeic.tech.pem 安装、配置frp
github上搜索frp。下载对应安装包。 # 分别在本地机器和vps上下载 wget https://github.com/fatedier/frp/releases/download/v0.40.0/frp_0.40.0_linux_386.tar.gz 解压安装包，配置frpc和frps # 分别解压 tar -zxvf frp_0.40.0_linux_386.tar.gz # [vps]配置frps mkdir /etc/frp cp frps.ini /etc/frps.ini cp frps /usr/bin/ cp -r sysytem/frps.service /etc/systemd/system/ # 更改frps.service脚本 vim /etc/systemd/system/frps.service [Service] ... User=root # 防止service方式启动主进程死掉 ... # 设置system启动 systemctl enable frps.service # 管理 systemctl start/stop/status frps.service # 或者 service frps start/stop/status # 配置frps.ini文件 # vim /etc/frp/frps.ini [common] bind_port = 7000 vhost_http_port = 80 vhost_https_port = 443 # 启动frps service frps start # [local] 本机配置frpc，注意frpc.ini是配置重点 # frpc的system管理和frps一致。 # 重点配置 root@animeic-pc:/etc/frp# tree ├── frpc.ini └── ssl ├── i.animeii.tech.key ├── i.animeii.tech.pem └── i.animeii.tech.zip # -----配置frpc.ini----- [common] server_addr = 207.246.100.83 # vps ip地址 server_port = 7000 # 对应vps bind_port # 配置https [https-i.animeii.tech] type = https custom_domains = i.animeii.tech plugin = https2http plugin_local_addr = 127.0.0.1:8081 # 证书配置 plugin_crt_path = /etc/frp/ssl/i.animeii.tech.pem plugin_key_path = /etc/frp/ssl/i.animeii.tech.key plugin_host_header_rewrite = 127.0.0.1 plugin_header_X-From-Where = frp # 配合nginx使用 # /etc/nginx/conf.d/i.animeii.tech.conf server { listen 8081; server_name 127.0.0.1; root /home/animeic/animeii/i.animeii.tech/public; # hugo生成的静态文件路径 location / { index index.html; try_files $uri $uri/ /index.html; } } # 启动frpc和nginx service frpc start nginx -s reload cloudflare cdn加速和开启ssl
在站点的dns项目下，开启代理小黄云
在ssl/tls 开启严格加密模式
在边缘证书下开启http定向的https
安装hugo
# 1.克隆安装 git clone https://github.com/gohugoio/hugo.git CGO_ENABLED=1 go install --tags extended # sass支持 # 2.编译后的执行文件复制到/usr/bin cd $GOPATH/bin sudo cp hugo /usr/bin/ 创建站点
hugo new site /animeii.tech/i.animeii.tech # 运行本地服务 hugo server 生成静态文件。nginx配置指向静态文件路径。
# 创建文档 hugo new post/how_build_website.md # 生成静态html hugo # 会在 i.animeii.tech生成public文件，nginx指向这个路径即可 整个建站流程大致是这样。如果已完成上面的过程，即可通过具体域名，外网访问到本地服务。
强调一下，使用frp内网穿透。完全是为了自己的需求：节省服务器资源、方便编写文档、数据的完全掌控、便于以后扩展其他服务。你完全可以不使用项技术，直接部署在云服务器上也是没问题的。
其中hugo主题的安装、配置。需要自己研究。之后再来开展相关内容。</content></entry></search>